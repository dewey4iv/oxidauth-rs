version: '2.1'

services:
  oxidauth:
    command: cargo watch -c -w lib -w api -x 'run --bin api server'
    build:
      dockerfile: Dockerfile
      context: .
    platform: "${DOCKER_PLATFORM:-linux/amd64}"
    stdin_open: true
    tty: true
    ports:
      - "${API_PORT:-8080}:80"
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}:5432/${DATABASE_NAME}"
    volumes:
      - './:/app'
      - 'oxidauth-target:/app/target'
    links:
      - oxidauth-postgres
    depends_on:
      - oxidauth-setup
      - oxidauth-postgres

  # oxidauth-setup:
  #   command: /bin/compose-setup.sh
  #   build:
  #     dockerfile: Dockerfile
  #     context: .
  #   platform: "${PLATFORM}"
  #   stdin_open: true
  #   tty: true
  #   env_file:
  #     - .env
  #   volumes:
  #     - 'oxidauth-etc-oxidauth:/etc/oxidauth'
  #   links:
  #     - oxidauth-postgres
  #   depends_on:
  #     - oxidauth-postgres

  oxidauth-postgres:
    command: ["postgres", "-c", "log_statement=all"]
    image: postgres:13.2
    platform: "${DOCKER_PLATFORM:-linux/amd64}"
    env_file:
      - .env
    environment:
      POSTGRES_DB: "${DATABASE_NAME}"
      POSTGRES_USER: "${DATABASE_USERNAME}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - 'oxidauth-postgres-vol:/var/lib/postgresql/data' 
    healthcheck:
      test: ["/bin/sh", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  oxidauth-postgres-vol:
  oxidauth-etc-oxidauth:
  oxidauth-target:
